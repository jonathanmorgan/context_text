---
# This playbook will install and configure postgresql.

# Install PostgreSQL
- name: Install Postgresql packages
  become: yes
  become_user: root
  apt:
    name:
      - postgresql
      - postgresql-contrib
      - libpq-dev
      - postgresql-server-dev-{{server_pgsql_version}}

# install psycopg2 in python 3.
- name: install psycopg2
  become: yes
  become_user: root
  pip:
    executable: pip3
    name: psycopg2

# set to listen on defined listen_addresses.
- name: Set listen_addresses for postgresql
  become: yes
  become_user: postgres
  lineinfile:
    path: '/etc/postgresql/{{server_pgsql_version}}/main/postgresql.conf'
    line: "listen_addresses = '{{server_pgsql_listen_addresses}}'"
  notify: restart postgresql

# allow database username/password connections.
- name: Set listen_addresses for postgresql
  become: yes
  become_user: postgres
  lineinfile:
    path: '/etc/postgresql/{{server_pgsql_version}}/main/pg_hba.conf'
    line: 'host all all  0.0.0.0/0 md5'
  notify: restart postgresql

# open firewall for postgresql
- name: Allow postgresql ports
  become: yes
  become_user: root
  ufw:
    rule: allow
    port: postgresql

# create non-postgres admin user?
- name: Create non-postgres admin user
  become: yes
  become_user: root
  #postgresql_user:
  #  #login_host: localhost
  #  name: '{{server_pgsql_admin_user}}'
  #  password: '{{server_pgsql_admin_password}}'
  #  role_attr_flags: SUPERUSER
  shell: sudo -u postgres psql -c "DO \$do\$ BEGIN IF NOT EXISTS( SELECT * FROM pg_catalog.pg_roles WHERE rolname = '{{server_pgsql_admin_user}}') THEN CREATE USER {{server_pgsql_admin_user}} WITH PASSWORD '{{server_pgsql_admin_password}}' SUPERUSER; END IF; END \$do\$;"
  when:
    - server_pgsql_admin_user != ""
    - server_pgsql_admin_password != ""