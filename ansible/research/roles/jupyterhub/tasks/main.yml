---
# This role will download and install jupyterhub server.

# update apt cache
- name: Update apt cache
  become: yes
  become_user: root
  apt:
    update_cache: yes

# install jupyterhub depenencies
- name: install jupyterhub dependencies
  become: yes
  become_user: root
  apt:
    name:
      - npm
      - nodejs
      - libzmq3-dev
    state: present

# install proxy using npm
#     sudo npm install -g configurable-http-proxy
- name: install configurable-http-proxy (npm)
  become: yes
  become_user: root
  npm:
    name: configurable-http-proxy
    global: yes
    state: latest

# cython in python 3.
- name: install cython
  become: yes
  become_user: root
  pip:
    executable: pip3
    name: cython
    state: latest

# install jupyterhub and ipython notebook in python 3.
- name: install jupyterhub and ipython notebook
  become: yes
  become_user: root
  pip:
    executable: pip3
    name:
      - jupyterhub
      - ipython[notebook]
      - jupyterhub-systemdspawner
    state: latest

# ==> configuration

# create jupyterhub config folder (defauts to /etc/jupyterhub)
- name: create jupyterhub config folder
  become: yes
  become_user: root
  file:
    path: "{{jupyterhub_config_folder}}"
    state: directory

# check if configuration file already there.
- name: check if jupyterhub_config.py exists
  stat:
    path: '{{jupyterhub_config_folder}}/jupyterhub_config.py'
  register: jupyterhub_config

# initialize jupyterhub configuration if not already there.
- name: initialize jupyterhub configuration
  become: yes
  become_user: root
  shell: jupyterhub --generate-config
  args:
    chdir: "{{jupyterhub_config_folder}}"
  when: jupyterhub_config.stat.exists == False

# add a token (no default - have to set this yourself)
- name: Add proxy token value.
  become: yes
  become_user: root
  lineinfile:
    path: '{{jupyterhub_config_folder}}/jupyterhub_config.py'
    line: "c.JupyterHub.proxy_auth_token = '{{jupyterhub_configproxy_auth_token}}'"
  when: jupyterhub_configproxy_auth_token != ""

# add admin_users
- name: Add proxy token value.
  become: yes
  become_user: root
  lineinfile:
    path: '{{jupyterhub_config_folder}}/jupyterhub_config.py'
    line: "c.Authenticator.admin_users = [ {{jupyterhub_admin_user_list}} ]"
  when: jupyterhub_admin_user_list != ""

# add white list if one specified.
- name: Add proxy token value.
  become: yes
  become_user: root
  lineinfile:
    path: '{{jupyterhub_config_folder}}/jupyterhub_config.py'
    line: "c.Authenticator.whitelist = [ {{jupyterhub_whitelist_list}} ]"
  when: jupyterhub_whitelist_list != ""

# copy default SSL cert and key to jupyterhub config folder.
#- name: initialize jupyterhub configuration
#  become: yes
#  become_user: root
#  shell: openssl req -x509 -newkey rsa:4096 -keyout jupyterhub_key.pem -out jupyterhub_cert.pem -days 3650 -nodes
#  args:
#    chdir: "{{jupyterhub_config_folder}}"

#- name: copy private key
#  become: yes
#  become_user: root
#  copy:
#    src: /etc/ssl/private/ssl-cert-snakeoil.key
#    dest: "{{jupyterhub_config_folder}}/jupyterhub_key.pem"

#- name: copy public certificate
#  become: yes
#  become_user: root
#  copy:
#    src: /etc/ssl/certs/ssl-cert-snakeoil.pem
#    dest: "{{jupyterhub_config_folder}}/jupyterhub_cert.pem"

# generate OpenSSL private key.
- name: Generate an OpenSSL private key.
  become: yes
  become_user: root
  openssl_privatekey:
    path: "{{ jupyterhub_config_folder }}/jupyterhub_key.pem"

# create certificate signing request (CSR)
- name: Generate an OpenSSL CSR.
  become: yes
  become_user: root
  openssl_csr:
    path: "{{ jupyterhub_config_folder }}/jupyterhub.csr"
    privatekey_path: "{{ jupyterhub_config_folder }}/jupyterhub_key.pem"
    common_name: "{{ server_name }}"

# generate certificate
- name: Generate a Self-Signed OpenSSL certificate.
  become: yes
  become_user: root
  openssl_certificate:
    path: "{{ jupyterhub_config_folder }}/jupyterhub_cert.pem"
    privatekey_path: "{{ jupyterhub_config_folder }}/jupyterhub_key.pem"
    csr_path: "{{ jupyterhub_config_folder }}/jupyterhub.csr"
    provider: selfsigned

# add public key to jupyterhub config.
- name: add public key to jupyterhub config.
  become: yes
  become_user: root
  lineinfile:
    path: '{{jupyterhub_config_folder}}/jupyterhub_config.py'
    line: "c.JupyterHub.ssl_cert = '{{jupyterhub_config_folder}}/jupyterhub_cert.pem'"

# add private key to jupyterhub configuration.
- name: Add private key to jupyterhub configuration.
  become: yes
  become_user: root
  lineinfile:
    path: '{{jupyterhub_config_folder}}/jupyterhub_config.py'
    line: "c.JupyterHub.ssl_key = '{{jupyterhub_config_folder}}/jupyterhub_key.pem'"

# configure jupyterhub to use systemd spawner.
- name: configure jupyterhub to use systemd spawner.
  become: yes
  become_user: root
  lineinfile:
    path: '{{jupyterhub_config_folder}}/jupyterhub_config.py'
    line: "c.JupyterHub.spawner_class = 'systemdspawner.SystemdSpawner'"

# ==> systemd service

# Create systemd service for jupyterhub.
- name: Create systemd service for jupyterhub
  become: yes
  become_user: root
  template:
    src: jupyterhub.service.j2
    dest: /etc/systemd/system/jupyterhub.service

# Enable jupyterhub service
- name: Enable jupyterhub service
  become: yes
  become_user: root
  service:
    name: jupyterhub
    enabled: True
    use: service

# Start jupyterhub and set as a startup service
- name: Enable jupyterhub as a startup service
  become: yes
  become_user: root
  service:
    name: jupyterhub
    state: started
    enabled: yes

# open firewall for jupyterhub
- name: Allow jupyterhub port
  become: yes
  become_user: root
  ufw:
    rule: allow
    port: 8000
